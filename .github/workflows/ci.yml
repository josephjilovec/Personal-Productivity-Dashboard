name: QuantumFlow Toolkit CI/CD

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

jobs:
  test:
    name: Run Tests (Python, Rust, JavaScript)
    runs-on: ubuntu-latest

    steps:
      # Checkout repository
      - name: Checkout code
        uses: actions/checkout@v4

      # Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Build Docker image
      - name: Build Docker image
        run: |
          docker build -t quantumflow-toolkit:latest -f deploy/Dockerfile .

      # Run Python tests with pytest
      - name: Run Python tests
        run: |
          docker run --rm quantumflow-toolkit:latest /bin/bash -c "cd /app/backend/python && pytest ../../tests/python/test_workflow.py ../../tests/python/test_quantum.py ../../tests/python/test_monitor.py"

      # Run Rust tests with Cargo
      - name: Run Rust tests
        run: |
          docker run --rm quantumflow-toolkit:latest /bin/bash -c "cd /app/backend/rust && cargo test"

      # Run JavaScript tests with Jest
      - name: Run JavaScript tests
        run: |
          docker run --rm quantumflow-toolkit:latest /bin/bash -c "cd /app/frontend && npm install && npm test"

      # Lint Python with flake8
      - name: Lint Python with flake8
        run: |
          docker run --rm quantumflow-toolkit:latest /bin/bash -c "cd /app/backend/python && pip install flake8 && flake8 . --max-line-length=88 --extend-ignore=E203"

      # Lint Rust with rustfmt
      - name: Lint Rust with rustfmt
        run: |
          docker run --rm quantumflow-toolkit:latest /bin/bash -c "cd /app/backend/rust && cargo fmt -- --check"

  deploy:
    name: Deploy to AWS ECS
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      # Checkout repository
      - name: Checkout code
        uses: actions/checkout@v4

      # Configure AWS credentials
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Login to Amazon ECR
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # Build, tag, and push Docker image to ECR
      - name: Build and push Docker image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: quantumflow-toolkit
          IMAGE_TAG: latest
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f deploy/Dockerfile .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      # Update ECS service
      - name: Update ECS Service
        run: |
          aws ecs update-service \
            --cluster quantumflow-cluster \
            --service quantumflow-service \
            --task-definition quantumflow-task \
            --force-new-deployment

      # Wait for ECS service stability
      - name: Wait for ECS Service Stability
        run: |
          aws ecs wait services-stable \
            --cluster quantumflow-cluster \
            --services quantumflow-service

env:
  # Environment variables for tests
  CIRQ_API_KEY: ${{ secrets.CIRQ_API_KEY }}
  QISKIT_API_KEY: ${{ secrets.QISKIT_API_KEY }}
  PENNYLANE_API_KEY: ${{ secrets.PENNYLANE_API_KEY }}
